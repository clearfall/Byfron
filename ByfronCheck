
# Full updated script with:
#  - Replaced ASCII header with requested "doo __________ ..." header
#  - Background silent search for newu.exe and _license.dat while main checks run
#  - Only prints findings at the end (if any). If _license.dat found, prints "Matrix Key found > <content>"
#  - Shortened Recording Rule Hub block and credit to @clearfall, "Discord coming soon."
#  - Fixed previous syntax errors and safe environment variable access
#  - Preserves the rest of the original system checks and Process Explorer step

# ====== ADMIN CHECK ======
$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()
).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $IsAdmin) {
    Write-Host "`n[WARNING] This script is NOT running with Administrator privileges." -ForegroundColor Red
    Write-Host "[ACTION] Please right-click PowerShell and then select 'Run as Administrator.'" -ForegroundColor Yellow
    Write-Host ""
    Pause
    exit 1
}

# ====== UTILITY FUNCTIONS ======
function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Wait-ForEnter {
    param(
        [string]$Message = "Press Enter to Continue"
    )
    Start-Sleep -Seconds 1
    Write-ColoredLine $Message Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

function Show-LoadingBar {
    for ($i = 0; $i -le 10; $i++) {
        $percent = $i * 10
        $bar = "#" * $i + "-" * (10 - $i)
        Write-Host -NoNewline "`rProgress: [ $bar ] $percent% " -ForegroundColor White
        Start-Sleep -Milliseconds 200
    }
    Write-Host ""
    Write-Host ""
}

# ====== BACKGROUND SEARCH (runs while the main script continues) ======
# Build search roots safely
$searchRoots = @()
if (Test-Path "C:\") { $searchRoots += "C:\" }

if ($env:USERPROFILE) {
    $searchRoots += (Join-Path $env:USERPROFILE 'Desktop')
    $searchRoots += (Join-Path $env:USERPROFILE 'Downloads')
}

if ($env:ProgramFiles) { $searchRoots += $env:ProgramFiles }

try {
    if (${env:ProgramFiles(x86)}) { $searchRoots += ${env:ProgramFiles(x86)} }
} catch {
    # ignore if undefined
}

$searchRoots += "C:\ToolsETA"

# Keep only existing and unique paths
$searchRoots = $searchRoots | Where-Object { $_ -and (Test-Path $_) } | Select-Object -Unique

# Start background job to find target files
$searchJob = Start-Job -Name Find_NewU_and_License -ScriptBlock {
    param($roots)
    $results = @()
    $targets = @("newu.exe","_license.dat")
    foreach ($root in $roots) {
        foreach ($target in $targets) {
            try {
                if (-not (Test-Path $root)) { continue }
                $found = Get-ChildItem -Path $root -Filter $target -Recurse -Force -ErrorAction SilentlyContinue
                if ($found) {
                    foreach ($f in $found) {
                        $results += [PSCustomObject]@{
                            FileName = $target
                            FullName = $f.FullName
                            Length   = $f.Length
                        }
                    }
                }
            } catch {
                # ignore inaccessible folders
            }
        }
    }
    return $results
} -ArgumentList ($searchRoots)

# ====== HEADER (updated ASCII art per request) ======
Clear-Host
Write-ColoredLine 'doo __________          _____                                 _________ .__                   __    ' Yellow
Write-ColoredLine '\______   \___.__._/ ____\______  ____   ____             \_   ___ \|  |__   ____   ____ |  | __' Yellow
Write-ColoredLine ' |    |  _<   |  |\   __\\_  __ \/  _ \ /    \    ______  /    \  \/|  |  \_/ __ \_/ ___\|  |/ /' Yellow
Write-ColoredLine ' |    |   \\___  | |  |   |  | \(  <_> )   |  \  /_____/  \     \___|   Y  \  ___/\  \___|    < ' Yellow
Write-ColoredLine ' |______  // ____| |__|   |__|   \____/|___|  /            \______  /___|  /\___  >\___  >__|_ \' Yellow
Write-ColoredLine '        \/ \/                               \/                    \/     \/     \/     \/     \/' Yellow
Write-ColoredLine ""

# ====== SHORTENED RECORDING RULE HUB (per request) ======
Write-ColoredLine "=== Recording Rule Hub ===" Yellow
Write-ColoredLine "Complete both steps." White
Write-ColoredLine "Apps extract to C:\ToolsETA" White
Write-ColoredLine "Credits: @clearfall" White
Write-ColoredLine "Discord coming soon." Yellow
Write-Host ""
Wait-ForEnter -Message "Press Enter to Continue"
Clear-Host

# ====== STEP 1: SYSTEM CHECK ======
Write-ColoredLine "Step 1 of 2: SYSTEM Check" White
Write-ColoredLine "INSTRUCTION: Reach 100% success" Yellow
Write-Host ""
Show-LoadingBar

$exclusionsOutput = @()
$defenderOutput = @()
$modulesOutput = @()
$windowsOutput = @()
$memoryIntegrityOutput = @()
$threatsOutput = @()
$powershellSigOutput = @()

$defaultModules = @(
    "Microsoft.PowerShell.Archive", "Microsoft.PowerShell.Diagnostics", "Microsoft.PowerShell.Host",
    "Microsoft.PowerShell.LocalAccounts", "Microsoft.PowerShell.Management", "Microsoft.PowerShell.Security",
    "Microsoft.PowerShell.Utility", "PackageManagement", "PowerShellGet", "PSReadLine", "Pester", "ThreadJob"
)

$protectedModule = "Microsoft.PowerShell.Operation.Validation"
$modulesPath = "C:\Program Files\WindowsPowerShell\Modules"
$deletedAny = $false
$protectedFilePath = "$modulesPath\$protectedModule\1.0.1\Diagnostics\Comprehensive\Comprehensive.Tests.ps1"
$expectedHash = "99B7CBE4325BA089DD9440A202B9E35D9E6F134A46312F3F1E93E71F23C8DAE3"

Get-ChildItem $modulesPath -ErrorAction SilentlyContinue | Where-Object { $_.PSIsContainer } | ForEach-Object {
    $moduleName = $_.Name
    $modulePath = $_.FullName
    $isDefault = $defaultModules -contains $moduleName
    $isProtected = $moduleName -eq $protectedModule
    $files = Get-ChildItem $modulePath -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer }
    $unauthorizedFiles = @()

    foreach ($file in $files) {
        try {
            $sig = Get-AuthenticodeSignature $file.FullName
            if ($sig.Status -ne 'Valid' -or ($sig.SignerCertificate -and $sig.SignerCertificate.Subject -notmatch "Microsoft")) {
                $unauthorizedFiles += $file
            }
        } catch {
            # ignore signature check errors
        }
    }

    if (-not $isDefault -and -not $isProtected) {
        foreach ($file in $files) { try { $file.Attributes = 'Normal' } catch {} }
        try {
            Remove-Item $modulePath -Recurse -Force -ErrorAction Stop
            $modulesOutput += "FAILURE: Removed unauthorized module: $moduleName"
            $deletedAny = $true
        } catch {
            $modulesOutput += "WARNING: Could not delete module '$moduleName'"
        }
    }
    elseif ($isProtected) {
        if ($unauthorizedFiles.Count -eq 0) {
            $modulesOutput += "SUCCESS: Protected module '$moduleName' verified."
        } else {
            foreach ($file in $unauthorizedFiles) {
                if ($file.FullName -ieq $protectedFilePath) {
                    try {
                        $bytes = [System.IO.File]::ReadAllBytes($file.FullName)
                        $sha256 = [System.Security.Cryptography.SHA256]::Create()
                        $actual = $sha256.ComputeHash($bytes)
                        $hash = ([BitConverter]::ToString($actual)).Replace("-", "")
                        if ($hash -ne $expectedHash) {
                            $modulesOutput += "WARNING: Protected file altered: '$($file.FullName)'"
                        }
                    } catch {}
                }
            }
            $modulesOutput += "SUCCESS: Protected module intact."
        }
    }
    else {
        foreach ($file in $unauthorizedFiles) {
            try {
                $file.Attributes = 'Normal'
                Remove-Item $file.FullName -Force -ErrorAction Stop
                $modulesOutput += "FAILURE: Removed unauthorized file: '$($file.FullName)'"
                $deletedAny = $true
            } catch {
                $modulesOutput += "WARNING: Could not delete file '$($file.FullName)'"
            }
        }
        if ($unauthorizedFiles.Count -eq 0) {
            $modulesOutput += "SUCCESS: Module '$moduleName' passed signature check."
        }
    }
}

Get-ChildItem $modulesPath -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
    try {
        $sig = Get-AuthenticodeSignature $_.FullName
        if ($sig.Status -ne 'Valid' -or ($sig.SignerCertificate -and $sig.SignerCertificate.Subject -notmatch "Microsoft")) {
            try {
                Remove-Item $_.FullName -Force
                $modulesOutput += "FAILURE: Removed unsigned file: '$($_.FullName)'"
                $deletedAny = $true
            } catch {
                $modulesOutput += "WARNING: Could not delete root file '$($_.FullName)'"
            }
        } else {
            $modulesOutput += "SUCCESS: Root file '$($_.Name)' is signed."
        }
    } catch {
        # ignore
    }
}

if (-not $deletedAny) {
    $modulesOutput += "SUCCESS: No unauthorized modules/files found."
}

try {
    if ($env:OS -eq "Windows_NT" -and (Get-CimInstance Win32_OperatingSystem -ErrorAction Stop)) {
        $windowsOutput += "SUCCESS: Running on Windows."
    } else {
        $windowsOutput += "FAILURE: Not running on Windows."
    }
} catch {
    $windowsOutput += "FAILURE: OS check failed."
}

try {
    $regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"
    $enabled = Get-ItemPropertyValue -Path $regPath -Name "Enabled" -ErrorAction Stop
    $memoryIntegrityOutput += "SUCCESS: Memory Integrity supported."
    if ($enabled -eq 1) {
        $memoryIntegrityOutput += "SUCCESS: Memory Integrity is ON."
    } else {
        $memoryIntegrityOutput += "FAILURE: Memory Integrity is OFF."
    }
} catch {
    $memoryIntegrityOutput += "FAILURE: Memory Integrity not supported or inaccessible."
}

try {
    $defender = Get-MpComputerStatus
    $service = Get-Service -Name WinDefend -ErrorAction SilentlyContinue

    if ($defender.AntivirusEnabled -and $service.Status -eq 'Running') {
        if (-not $defender.RealTimeProtectionEnabled) {
            try {
                Set-MpPreference -DisableRealtimeMonitoring $false
                Start-MpWDOScan
                $defenderOutput += "FAILURE: Realtime protection was OFF. Enabling..."
            } catch {
                $defenderOutput += "WARNING: Could not re-enable Defender."
            }
        } else {
            $defenderOutput += "SUCCESS: Realtime protection is ON."
        }
    } else {
        $defenderOutput += "FAILURE: Microsoft Defender Antivirus is not running."
    }
} catch {
    $defenderOutput += "WARNING: Could not query Defender status."
}

try {
    $exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
    if ($exclusions) {
        $exclusionsOutput += "FAILURE: Exclusion paths found:`n$($exclusions -join "`n")"
    } else {
        $exclusionsOutput += "SUCCESS: No Defender exclusions set."
    }
} catch {
    $exclusionsOutput += "WARNING: Could not check exclusions."
}

try {
    $threats = Get-MpThreat | Where-Object { $_.Status -eq "Active" }
    if ($threats) {
        foreach ($t in $threats) {
            $threatsOutput += "FAILURE: $($t.ThreatName) | $($t.Resources)"
        }
    } else {
        $threatsOutput += "SUCCESS: No active threats."
    }
} catch {
    $threatsOutput += "WARNING: Threat scan failed."
}

try {
    $psPath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
    $sig = Get-AuthenticodeSignature -FilePath $psPath
    if ($sig.Status -eq 'Valid' -and $sig.SignerCertificate.Subject -like '*Microsoft Windows*') {
        $powershellSigOutput += "SUCCESS: PowerShell is signed and valid."
    } else {
        $powershellSigOutput += "FAILURE: PowerShell binary signature invalid."
    }
} catch {
    $powershellSigOutput += "WARNING: Could not verify PowerShell binary."
}

function Write-Section {
    param([string]$Title, [string[]]$Lines)
    Write-Host "--- $Title ---" -ForegroundColor White
    foreach ($line in $Lines) {
        if ($line -match "^SUCCESS") { Write-Host $line -ForegroundColor Green }
        elseif ($line -match "^FAILURE") { Write-Host $line -ForegroundColor Red }
        elseif ($line -match "^WARNING") { Write-Host $line -ForegroundColor Yellow }
        else { Write-Host $line -ForegroundColor White }
    }
}

Write-Section "Files + Modules" $modulesOutput
Write-Section "OS Check" $windowsOutput
Write-Section "Memory Integrity" $memoryIntegrityOutput
Write-Section "Windows Defender" $defenderOutput
Write-Section "Exclusions" $exclusionsOutput
Write-Section "Threats" $threatsOutput
Write-Section "Binary Sig" $powershellSigOutput

$allResults = $modulesOutput + $windowsOutput + $memoryIntegrityOutput + $defenderOutput + $exclusionsOutput + $threatsOutput + $powershellSigOutput
$total = ($allResults | Where-Object { $_ -match '^(SUCCESS|FAILURE|WARNING)' }).Count
$success = ($allResults | Where-Object { $_ -match '^SUCCESS' }).Count
$rate = if ($total -gt 0) { [math]::Round(($success / $total) * 100, 0) } else { 0 }
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }

Write-Host ""
Write-Host ("Success Rate: $rate% ($success / $total)") -ForegroundColor $rateColor

Wait-ForEnter -Message "Press Enter to Continue"
Clear-Host

# ====== STEP 2: PROCESS EXPLORER ======
Write-ColoredLine "Step 2 of 2: Process Explorer" White
Write-ColoredLine "INSTRUCTION: Wait for Process Explorer to open. Scroll to the bottom, then close the window." Yellow
Write-Host ""
Show-LoadingBar

$processNames = @("procexp32", "procexp64", "procexp64a")
$runningPE = Get-Process -ErrorAction SilentlyContinue | Where-Object { $processNames -contains $_.ProcessName.ToLower() }

if ($runningPE) {
    Write-ColoredLine "[SUCCESS] Found and terminated running Process Explorer process(es)." Green
    $runningPE | ForEach-Object {
        try {
            $_ | Stop-Process -Force -ErrorAction Stop
            Write-ColoredLine "[SUCCESS]  • Terminated process ID $($_.Id)." Green
        } catch {
            Write-ColoredLine "[FAILED]  • Failed to terminate process ID $($_.Id): $($_.Exception.Message)" Red
        }
    }
    Start-Sleep -Seconds 2
    Write-ColoredLine "[SUCCESS] All Process Explorer processes terminated." Green
} else {
    Write-ColoredLine "[SUCCESS] No running Process Explorer processes were found." Green
}

$baseFolder = "C:\ToolsETA"
$extractFolder = Join-Path $baseFolder "ProcessExplorer"
$zipUrl = "https://download.sysinternals.com/files/ProcessExplorer.zip"
$zipPath = Join-Path $baseFolder "ProcessExplorer.zip"

if (Test-Path $baseFolder) {
    Write-ColoredLine "[SUCCESS] Cleaned up existing C:\ToolsETA folder." Green
    Get-ChildItem -Path $baseFolder -Force -Recurse | ForEach-Object {
        try {
            if ($_.Attributes -band [System.IO.FileAttributes]::ReadOnly) {
                $_.Attributes = $_.Attributes -bxor [System.IO.FileAttributes]::ReadOnly
            }
            if ($_.Attributes -band [System.IO.FileAttributes]::Hidden) {
                $_.Attributes = $_.Attributes -bxor [System.IO.FileAttributes]::Hidden
            }
            Remove-Item -LiteralPath $_.FullName -Recurse -Force -ErrorAction Stop
        } catch {
            Write-ColoredLine "[INFO] Didn't remove item $($_.FullName): $($_.Exception.Message)" White
        }
    }
} else {
    try {
        New-Item -ItemType Directory -Path $baseFolder -ErrorAction Stop | Out-Null
        Write-ColoredLine '[SUCCESS] Created folder C:\ToolsETA.' Green
    } catch {
        Write-ColoredLine '[INFO] Folder may already exist' Green
    }
}

try {
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing -ErrorAction Stop
    Write-ColoredLine '[SUCCESS] Downloaded Process Explorer.' Green
} catch {
    Write-ColoredLine "[FAILED] Failed to download Process Explorer: $($_.Exception.Message)" Red
}

try {
    Add-Type -AssemblyName System.IO.Compression.FileSystem
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractFolder)
    Write-ColoredLine '[SUCCESS] Extracted Process Explorer zip.' Green
} catch {
    Write-ColoredLine '[SUCCESS] Files already exist' Green
}
Remove-Item $zipPath -Force -ErrorAction SilentlyContinue

$regFileUrl = "https://pastebin.com/raw/gse8NxwU"
$regFilePath = Join-Path $baseFolder "procexp_config.reg"

try {
    Invoke-WebRequest -Uri $regFileUrl -OutFile $regFilePath -UseBasicParsing -ErrorAction Stop
    Write-ColoredLine "[SUCCESS] Downloaded Process Explorer registry configuration." Green
} catch {
    Write-ColoredLine "[FAILED] Failed to download registry config: $($_.Exception.Message)" Red
}

try {
    $cmdPath = "$env:SystemRoot\System32\cmd.exe"
    if (-Not (Test-Path $cmdPath)) {
        throw "cmd.exe not found at expected location: $cmdPath"
    }
    & $cmdPath /c "reg import `"$regFilePath`""
    if ($LASTEXITCODE -eq 0) {
        Write-ColoredLine "[SUCCESS] Imported registry configuration successfully." Green
    } else {
        Write-ColoredLine "[FAILED] reg import returned non-zero exit code: $LASTEXITCODE" Red
    }
} catch {
    Write-ColoredLine "[FAILED] Registry importing failed: $($_.Exception.Message)" Red
}

$actualExe = Get-ChildItem -Path $extractFolder -Filter "procexp64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1

if ($actualExe) {
    Write-ColoredLine "[SUCCESS] Launched Process Explorer." Green
    $process = Start-Process -FilePath $actualExe.FullName -PassThru
    Start-Sleep -Seconds 1

    $wshell = New-Object -ComObject wscript.shell
    Start-Sleep -Milliseconds 500
    $null = $wshell.AppActivate($process.Id)
    Start-Sleep -Milliseconds 500
    $wshell.SendKeys('% ')
    Start-Sleep -Milliseconds 200
    $wshell.SendKeys('x')
    Start-Sleep -Milliseconds 500

    Write-ColoredLine "[SUCCESS] Process Explorer window maximized." Green
    Write-ColoredLine "[SUCCESS] Process Explorer launched successfully." Green
    Write-Host ""

    $process.WaitForExit()
    Write-ColoredLine "[SUCCESS] Success Rate: 100% (1 / 1)." Green
} else {
    Write-ColoredLine "[FAILED] procexp64.exe was not found." Red
    Write-ColoredLine "[SUCCESS] Success Rate: 0% (0 / 1)." Red
}

# ====== WAIT FOR BACKGROUND SEARCH JOB TO COMPLETE AND SHOW RESULTS IF ANY ======
if ($searchJob -and (Get-Job -Name $searchJob.Name -ErrorAction SilentlyContinue)) {
    $job = Get-Job -Name $searchJob.Name
    if ($job.State -eq 'Running') {
        # Give the job a short timeout to finish (main tasks are complete)
        $job | Wait-Job -Timeout 5 | Out-Null
    }
    $results = @()
    try {
        $results = Receive-Job -Job $job -ErrorAction SilentlyContinue
    } catch {
        # ignore receive errors
    } finally {
        $job | Remove-Job -Force -ErrorAction SilentlyContinue
    }

    if ($results -and $results.Count -gt 0) {
        foreach ($r in $results) {
            if ($r.FileName -ieq "newu.exe") {
                Write-ColoredLine ("Found newu.exe at: " + $r.FullName) Green
            } elseif ($r.FileName -ieq "_license.dat") {
                Write-ColoredLine ("Found _license.dat at: " + $r.FullName) Green
                try {
                    $content = Get-Content -Path $r.FullName -Raw -ErrorAction Stop
                    $contentTrim = $content.Trim()
                    if ($contentTrim -eq "") {
                        Write-ColoredLine "Matrix Key found > (file empty)" Yellow
                    } else {
                        Write-ColoredLine ("Matrix Key found > " + $contentTrim) Green
                    }
                } catch {
                    Write-ColoredLine ("[ERROR] Could not read _license.dat: " + $_.Exception.Message) Red
                }
            }
        }
    } else {
        # intentionally silent if nothing found
    }
}

Wait-ForEnter -Message "Press Enter to exit."
exit
